" source $VIMRUNTIME/defaults.vim

" My vimrc is sourced from here.
" ~/.vim/vimrc

" ----------------------------------------------------------------------------
" PLUGINS
" ----------------------------------------------------------------------------

" Specifies a directory for plugins.
call plug#begin('~/.vim/plugged')

" Installs Monokai Pro theme.
Plug 'phanviet/vim-monokai-pro'

" Installs fancy-pants start screen.
Plug 'mhinz/vim-startify'

" Installs Zenburn theme.
Plug 'jnurmine/Zenburn'

" Automated bullet lists.
Plug 'dkarter/bullets.vim'

" Powerful search command.
Plug 'ctrlpvim/ctrlp.vim'

" Distraction-free mode.
Plug 'junegunn/goyo.vim'

" Dims lines not under cursor.
Plug 'junegunn/limelight.vim'

" Alternative fuzzy finder.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Enhanced Python indentation.
Plug 'vim-scripts/indentpython.vim'

" Markdown preview.
" Plug 'iamcco/markdown-preview.nvim'

" Adds ability to quickly comment out lines.
Plug 'preservim/nerdcommenter'

" Adds a tree explorer sidebar when called.
Plug 'preservim/nerdtree'

" A light statusline (based on vim powerline).
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'

" Improves folding of python code.
Plug 'tmhedberg/SimpylFold'

" Allows text filtering and alignment.
Plug 'godlygeek/tabular'

" Syntax and style checker for python (run with <F7>).
Plug 'nvie/vim-flake8'

" Git wrapper for vim.
Plug 'tpope/vim-fugitive'

" Lightweight git branch viewer that integrates with fugitive.
Plug 'rbong/vim-flog'

" Markdown plugin.
" Plug 'plasticboy/vim-markdown'

" Markdown plugin for nvim.
Plug 'tpope/vim-markdown'

" Adds tabs to NERDTree.
" No longer maintained.
" Plug jistr/vim-nerdtree-tabs

" Adds multiple language support.
Plug 'sheerun/vim-polyglot'

" Allows copying to system clipboard with <cp>,
" and pasting from system clipboard with <cv>.
Plug 'christoomey/vim-system-copy'

" LaTeX syntax plugin.
Plug 'lervag/vimtex'

" Adds ability to easily create links between files in the wiki directory.
" Plug 'vimwiki/vimwiki'

" Code-completion engine.
" Plug 'ycm-core/YouCompleteMe'

" Adds a tree structure to the change history.
Plug 'mbbill/undotree'

" Shows indentations as characters - useful for python.
Plug 'Yggdroot/indentLine'

" Highlights unique characters on a line to help with `f` and `t` commands
Plug 'unblevable/quick-scope'

" Adds syntax highlighting to Python's regex strings. Various other
" configuration options too.
Plug 'Galicarnax/vim-regex-syntax'

" Adds a minimap to the right side of the screen.
" Call using <leader>mm, dismiss with <leader>mc.
" Plug 'severin-lemaignan/vim-minimap'

" Installs neovim-specific themes.
Plug 'andersevenrud/nordic.nvim'
Plug 'rebelot/kanagawa.nvim'
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
Plug 'tjdevries/colorbuddy.nvim', { 'branch': 'dev' }
Plug 'jesseleite/nvim-noirbuddy'
Plug 'JoshPorterDev/nvim-base16'

" Some other colours.
Plug 'lurst/austere.vim'
Plug 'huyvohcmc/atlas.vim'
" Plug 'chriskempson/base16-vim'
Plug 'ntk148v/komau.vim'
Plug 'preservim/vim-colors-pencil'
Plug 'jaredgorski/Mies.vim'
Plug 'yorickpeterse/vim-paper'
Plug 'stefanvanburen/rams.vim'

" Neovim statusline.
Plug 'nvim-lualine/lualine.nvim'
Plug 'kyazdani42/nvim-web-devicons'

" Initialise plugin system.
call plug#end()

" ----------------------------------------------------------------------------
" / END OF PLUGINS
" ----------------------------------------------------------------------------


" ----------------------------------------------------------------------------
" GENERAL SETTINGS
" ----------------------------------------------------------------------------

set termguicolors

" Sets Zenburn theme from the zenburn plugin if vim opened.
if !has('nvim')
  colorscheme austere
endif

" Sets nordic theme from the nordic plugin if nvim opened.
if has('nvim')
  colorscheme acme
endif

" This will 'ward off unexpected things that your distro might have made'.
set nocompatible

" Highlight cursor line.
set cursorline

" Attempt to determine file type based on name and possibly contents.
" Allows intelligent auto-indenting for each filetype, and
" for plugins that are filetype-specific.
filetype indent plugin on

" Enable syntax highlighing.
syntax on

" Allows switching between unsaved buffers within the same window.
" set hidden

" Better command-line completion.
set wildmenu

" Show partial commands in the last line of the screen.
set showcmd

" Highlight searches (use <Ctrl-L> to turn off until next search).
set hlsearch

" Use case-insensitive search, except when using capital letters.
set ignorecase
set smartcase

" Set incremental search
set incsearch

" Allow backspacing over autoindent, line breaks and start of
" insert action. Without `start`, cannot delete anything with
" backspace except new text inserted when in insert mode.
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is on,
" keep the same indent as the line you're currently on.
set autoindent

" Stop certain movements from always going to the first character of a line.
set nostartofline

" Display cursor position in the last line of the window.
set ruler

" Always display the status line, even if only one window displayed.
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
" set confirm

" Use visual bell instead of beeping when doing something wrong.
" I have disabled this as it's like a bloody lightning storm inside my
" laptop.
" set visualbell

" Enable use of the mouse for all modes.
set mouse=a

" Set the command window height to 2 lines. This avoids many cases of
" having to press <Enter> to continue.
" set cmdheight=2

" Display line numbers on the left.
set number

" Make line number background transparent, and set number colour to dark grey.
if !has('nvim')
  highlight clear LineNr
  highlight LineNr ctermfg=DarkGrey
endif
" nvim needs guifg to work, even in terminal.
if has('nvim')
  highlight clear LineNr
  highlight LineNr guifg=#5d677a
endif

" Quickly time out on keycodes, but never time out on mappings.
set notimeout ttimeout ttimeoutlen=200

" Use <F10> to toggle between 'paste' and 'nopaste'
" (This doesn't seem to work.)
set pastetoggle=<F10>

" Enable folding
set foldmethod=indent  " Sets folds based on line indents.
set foldlevel=99

" Enables persistent undo. Undo files are stored in the specified directory.
set undodir=~/.vim/undodir
set undofile

set spell mousemodel=popup_setpos

" ----------------------------------------------------------------------------
" / END OF GENERAL SETTINGS
" ----------------------------------------------------------------------------


" ----------------------------------------------------------------------------
" SYNTAX-SPECIFIC SETTINGS
" ----------------------------------------------------------------------------

" C
" -

" Use eight spaces instead of default two for tabs.
autocmd FileType c set tabstop=8


" MARKDOWN
" --------

" Treat all .md files as Markdown files.
autocmd BufNewFile,BufRead *.md set filetype=markdown

" Highlight the line that the cursor is on.
autocmd FileType markdown set cursorline

" Hide and format markdown elements like **bold**.
autocmd FileType markdown set conceallevel=0

" Disable markdown syntax concealing.
let g:markdown_syntax_conceal=0

" Enable spellchecker in Markdown files.
autocmd FileType markdown setlocal spell spelllang=en_gb

" Set lines to wrap instead of continuing off screen.
" Using `linebreak` ensures that whole words are wrapped.
autocmd FileType markdown set linebreak

" Converts tabs to spaces.
autocmd FileType markdown set expandtab

" Use two spaces instead of default four for tabs.
autocmd FileType markdown set tabstop=2

" Use two spaces instead of default four for indents.
autocmd FileType markdown set shiftwidth=2

" Keeps the cursor in the middle of screen (ish).
autocmd FileType markdown set scrolloff=12


" LaTeX
" -----

" Wrap whole words only.
autocmd FileType tex,latex set linebreak
" Stops the syntax being annoyingly hidden.
let g:vimtex_syntax_conceal_disable=1
" Turn on spell checking for LaTeX files.
autocmd FileType tex,latex set spell mousemodel=popup_setpos
" Automatically update pdf on save.
" autocmd BufWritePost *.tex term ++close ++hidden pdflatex %

" LUA
" ---

au BufRead,BufNewFile *.lua
  \ set expandtab
  \ | set tabstop=4
  \ | set softtabstop=4
  \ | set shiftwidth=4
  \ | set autoindent

autocmd FileType lua set cursorline

" PYTHON
" ------

" General Python settings.
au BufRead, BufNewFile *.py
  \ set tabstop=4
  \ | set softtabstop=4
  \ | set shiftwidth=4
  \ | set expandtab
  \ | set autoindent
  \ | set fileformat=unix
  \ | set encoding=utf-8

" Flag extraneous whitespace.
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Highlight column at specified width.
" Superseded by the `execute` command below
" au BufRead,BufNewFile *.py set colorcolumn=80

" Wrap text after specified width.
" Actually moves text to new line, doesn't wrap.
" au BufRead,BufNewFile *.py set textwidth=79

" Highlight line under cursor.
autocmd FileType python set cursorline

" Not *entirely* sure what this does, but involved in `making code look pretty`.
let python_highlight_all=1

" Binds <F5> to run the currently open program.
" Excellent explanation here:
" http://stackoverflow.com/questions/18948491/ddg#18948530
autocmd FileType python map <buffer> <F5> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer> <F5> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>

" Highlights columns past 79.
autocmd FileType python execute "set colorcolumn=" . join(range(80,335), ',')


" HTML, CSS & JAVASCRIPT
" ----------------------

au BufNewFile,BufRead *.js,*.html,*.css
  \ set tabstop=2
  \ | set softtabstop=2
  \ | set shiftwidth=2


" GROFF
" -----

" Keeps the cursor near the middle of the screen... Possibly.
autocmd FileType groff set scrolloff=12
" Shortcut for bold font.
autocmd filetype groff map <leader>bd a\*[BD]\*[PREV]<Esc>bba
" Shortcut for italic font.
autocmd filetype groff map <leader>it a\*[IT]\*[PREV]<Esc>bba
" Shortcut for en-dash.
autocmd filetype groff map <leader>en a\[en]
" Shortcut for em-dash.
autocmd filetype groff map <leader>em a\[em]
" Enable groff syntax highlighting.
au BufNewFile,BufRead *.groff,*.mom set filetype=groff
" Wrap whole words at edge of page, rather than mid-word.
autocmd FileType groff set linebreak
" Enable spellcheck for groff files.
autocmd FileType groff setlocal spell spelllang=en_gb mousemodel=popup_setpos
" Make Limelight treat full stops as the end of a line. Otherwise everything
" highlighted.
autocmd FileType groff let g:limelight_bop = '^[^.]'
autocmd FileType groff let g:limelight_eop = '\.'
" For inserting reference blocks in Groff.
autocmd FileType groff map <leader>ref a\c<Esc>o<Esc>i.REF \" REF NO. <Esc>o<Esc>i.[<Esc>o<Esc>o.]<Esc>o.REF<Esc>kk
" For inserting footnotes in Groff.
autocmd FileType groff map <leader>fn o<Esc>i.FOOTNOTE<Esc>o<Esc>o.FOOTNOTE END<Esc>ki
" Save and write groff-mom files and generate/update pdf.
:map <leader>groff :w<CR> :silent !pdfmom % > %:r.pdf<CR>:redraw!<CR>

" ----------------------------------------------------------------------------
" / END OF SYNTAX-SPECIFIC SETTINGS
" ----------------------------------------------------------------------------


" ----------------------------------------------------------------------------
" PLUGIN CONFIGURATION
" ----------------------------------------------------------------------------

" VIM MARKDOWN
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_math = 1
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_autowrite = 1  " Writes file if link followed.
let g:vim_markdown_edit_url_in = 'tab'
let g:vim_markdown_follow_anchor = 1
let g:vim_markdown_new_list_item_indent = 2
let g:vim_markdown_conceal = 0

" SIMPYLFOLD
let g:SimpylFold_docstring_preview=1  " Shows docstrings for folded code.

" YOUCOMPLETEME
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
" Hides the annoying syntactic definition popups(?)
nmap <leader>h <plus>(YCMHover)

" NERDTREE
let NERDTreeIgnore=['\.pyc$', '\~$']

" BULLETS
let g:bullets_enabled_file_types = ['markdown']

" CTRLP
" Tells ctrlp plugin to ignore pdf files.
let g:ctrlp_custom_ignore = {'file': '\v\.(pdf)$'}

" VIMWIKI
" Sets vimwiki syntax to Markdown.
" let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" VIM-AIRLINE
" Only try to load fancy symbols if they exist in the font being used
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
" Draw the line at the top of the screen.
" let g:airline_statusline_ontop=1
let g:airline_powerline_fonts = 1
" Enable the list of buffers.
let g:airline#extensions#tabline#enabled = 1
" Show only the filename, rather than full path.
let g:airline#extensions#tabline#fnamemod = ':t'
" Show only filename in buffer names.
let g:airline#extensions#tabline#formatter = 'unique_tail'
" Automatically truncate the bar in smaller windows.
let g:airline#extensions#default#section_truncate_width = {
  \ 'b': 79,
  \ 'x': 60,
  \ 'y': 88,
  \ 'z': 45,
  \ 'warning': 80,
  \ 'error': 80,
  \ }
" Set the theme
" if has('nvim')
"   let g:airline_theme ='base16_nord'
" endif


" QUICK SCOPE
" Only display highlights when the specified keys are pressed.
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" LIMELIGHT
" Alters the dimming of paragraphs that aren't under the cursor
" Higher number = dimmer
let g:limelight_default_coefficient = 0.8  " Default 0.7

" ----------------------------------------------------------------------------
" / END OF PLUGIN CONFIGURATION
" ----------------------------------------------------------------------------


" ----------------------------------------------------------------------------
" CUSTOM MAPPINGS
" ----------------------------------------------------------------------------

" NB: <CR> is carriage return (i.e. same as hitting Enter)

" nnoremap is used to map one key combination to another.
" The `no` part means `remap the key in normal mode` (as opposed to visual).
" <leader> is `\` by default.

" Automatically enclose text with the specified bracket type.
" Press a motion key after typing to execute.
" Parentheses, to end of current word.
:map <leader>p i(<Esc>ea)<Esc>
" Parentheses, to end of line.
:map <leader>pe i(<Esc>$a)<Esc>
" Square bracket, to end of current word.
:map <leader>b i[<Esc>ea]<Esc>
" Square bracket, to end of line.
:map <leader>be i[<Esc>$a]<Esc>
" Curly braces, to end of current word.
:map <leader>c i{<Esc>ea}<Esc>
" Curly braces, to end of line.
:map <leader>ce i{<Esc>$a}<Esc>

" For inserting bold font in LaTeX.
autocmd FileType tex,latex map <leader>bf a\textbf{}<Esc>i
" For inserting italic font in LaTeX.
autocmd FileType tex,latex map <leader>it a\textit{}<Esc>i
" For inserting inline maths in LaTeX.
autocmd FileType tex,latex map <leader>ima a$$<Esc>i
" For inserting newline maths in LaTeX.
autocmd FileType tex,latex map <leader>oma o<Esc>o\begin{align*}<Esc>o<Esc>o<backspace>\end{align*}<Esc>o<esc>kki<tab>
" For inserting bullet points in LaTeX.
autocmd FileType tex,latex map <leader>bullets o<Esc>o\begin{itemize}<Esc>o<Esc>o<backspace>\end{itemize}<Esc>o<esc>kki<tab>\item

" To insert Python shebang line.
autocmd FileType python map <leader>sb i#!/usr/bin/env python3<Esc>

" Maps <F9> to open Goyo
:map <F9> :Goyo<CR>

" Maps Ctrl-J to move to split below.
" nnoremap <C-J> <C-W><C-J>
" Maps Ctrl-K to move to split above.
" nnoremap <C-K> <C-W><C-K>
" Maps Ctrl-L to move to the split to the right.
" nnoremap <C-L> <C-W><C-L>
" Maps Ctrl-H to move to the split to the left.
" nnoremap <C-H> <C-W><C-H>

" Maps Undotree to <F8>
nnoremap <F8> :UndotreeToggle<CR>

" Remap space to jump to end of line.
nnoremap <space> $

" Switch between light and dark colour schemes
:map <leader>li :colorscheme acme<CR>
:map <leader>da :colorscheme kanagawa<CR>

" ----------------------------------------------------------------------------
" / END OF CUSTOM MAPPINGS
" ----------------------------------------------------------------------------


" ----------------------------------------------------------------------------
" AUTOMATIC COMMANDS
" ----------------------------------------------------------------------------

" Automatically open markdown files in Goyo mode.
" Commented out as makes the status bar look weird when exiting, for some reason.
" autocmd FileType markdown Goyo 80

" Automatically enable Limelight when opening Goyo.
autocmd! User GoyoEnter Limelight

" Automatically reload .vimrc when exiting Goyo.
" Fixes issue with colourscheme not reapplying upon leaving Goyo.
" The disable Limelight command needs to be here in order to work properly.
autocmd! User GoyoLeave
" Automatically disable Limelight when closing Goyo.
autocmd! User GoyoLeave Limelight!
autocmd User GoyoLeave nested source ~/.vim/vimrc

" Set the cursorline off in Limelight and back on when quitting.
autocmd User GoyoEnter set nocursorline
autocmd User GoyoLeave set cursorline

" ----------------------------------------------------------------------------
" / END OF AUTOMATIC COMMANDS
" ----------------------------------------------------------------------------

" LUALINE
" Have put this down here otherwise it messes up the file syntax highlighting.
lua << END
require('lualine').setup()
END

